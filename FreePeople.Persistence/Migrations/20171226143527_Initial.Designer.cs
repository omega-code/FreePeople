// <auto-generated />
using FreePeople.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace FreePeople.Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20171226143527_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FreePeople.Persistence.DTO.AdministratorDTO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CityId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Administrator");
                });

            modelBuilder.Entity("FreePeople.Persistence.DTO.CityDTO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("City");
                });

            modelBuilder.Entity("FreePeople.Persistence.DTO.PlaceDTO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(true);

                    b.Property<Guid>("CityId");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(true);

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("HowToGet")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(true);

                    b.Property<string>("MapUrl")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Place");
                });

            modelBuilder.Entity("FreePeople.Persistence.DTO.SpeakerDTO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(true);

                    b.Property<Guid>("CityId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(true);

                    b.Property<string>("Facebook")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(true);

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Photo")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Speaker");
                });

            modelBuilder.Entity("FreePeople.Persistence.DTO.TalkDTO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ApprovedAt");

                    b.Property<Guid?>("ApprovedById");

                    b.Property<Guid>("CityId");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(true);

                    b.Property<string>("FullInfo")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true);

                    b.Property<Guid?>("PlaceId");

                    b.Property<DateTime?>("PlaceVerifiedAt");

                    b.Property<Guid?>("PlaceVerifiedById");

                    b.Property<DateTime?>("PublishedAt");

                    b.Property<Guid?>("PublishedById");

                    b.Property<string>("Report")
                        .HasMaxLength(2000)
                        .IsUnicode(true);

                    b.Property<DateTime?>("ReportedAt");

                    b.Property<Guid?>("ReportedById");

                    b.Property<string>("ShortInfo")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true);

                    b.Property<Guid>("SpeakerId");

                    b.Property<DateTime>("StartsAt");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("CityId");

                    b.HasIndex("PlaceId");

                    b.HasIndex("PlaceVerifiedById");

                    b.HasIndex("PublishedById");

                    b.HasIndex("ReportedById");

                    b.HasIndex("SpeakerId");

                    b.ToTable("Talk");
                });

            modelBuilder.Entity("FreePeople.Persistence.DTO.AdministratorDTO", b =>
                {
                    b.HasOne("FreePeople.Persistence.DTO.CityDTO", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FreePeople.Persistence.DTO.PlaceDTO", b =>
                {
                    b.HasOne("FreePeople.Persistence.DTO.CityDTO", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FreePeople.Persistence.DTO.SpeakerDTO", b =>
                {
                    b.HasOne("FreePeople.Persistence.DTO.CityDTO", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FreePeople.Persistence.DTO.TalkDTO", b =>
                {
                    b.HasOne("FreePeople.Persistence.DTO.AdministratorDTO", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById");

                    b.HasOne("FreePeople.Persistence.DTO.CityDTO", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FreePeople.Persistence.DTO.PlaceDTO", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId");

                    b.HasOne("FreePeople.Persistence.DTO.AdministratorDTO", "PlaceVerifiedBy")
                        .WithMany()
                        .HasForeignKey("PlaceVerifiedById");

                    b.HasOne("FreePeople.Persistence.DTO.AdministratorDTO", "PublishedBy")
                        .WithMany()
                        .HasForeignKey("PublishedById");

                    b.HasOne("FreePeople.Persistence.DTO.AdministratorDTO", "ReportedBy")
                        .WithMany()
                        .HasForeignKey("ReportedById");

                    b.HasOne("FreePeople.Persistence.DTO.SpeakerDTO", "Speaker")
                        .WithMany()
                        .HasForeignKey("SpeakerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
